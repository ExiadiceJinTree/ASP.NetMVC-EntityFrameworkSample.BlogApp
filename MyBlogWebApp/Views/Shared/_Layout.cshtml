@using MyBlogWebApp.Models

@{
    // 現在のリクエストのコントローラ名とアクション名を取得
    var reqControllerName = HttpContext.Current.Request.RequestContext.RouteData.Values["controller"].ToString();
    var reqActionName = HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString();
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title</title>

    @* bootstrapを適用 *@
    <link href="~/Content/bootstrap.min.css" rel="stylesheet" />

    <style type="text/css">
        body {
            padding-top: 70px;  /* bootstrapのnavigation barを(navbar-fixed-topで)表示する際に、ページ上部に70pxの余白が必要なため。 */
        }

        /* ArticleのIndexビューでの各記事項目の設定 */
        .article-body {
            height: 60px;  /* 各記事項目の高さ */

            /* 複数行の記事本文を省略表示する */
            text-overflow: ellipsis;
            overflow: hidden;
            white-space: nowrap
        }
    </style>
</head>
<body>
    @* ヘッダーのナビゲーション部分 *@
    <nav class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                @* タイトル(記事一覧へのリンク付き) *@
                @* ログイン画面でもログインをキャンセルして記事一覧画面へ戻れる *@
                @Html.ActionLink("MyBlog", "Index", new { Controller = "Articles" }, new { @class = "navbar-brand" })
            </div>
            <ul class="nav navbar-nav navbar-right">
                @if (Request.IsAuthenticated)
                {
                    <li>@Html.ActionLink("投稿する", "Create", "Articles")</li>
                    <li>@Html.ActionLink("ログアウト", "SignOut", "Login")</li>
                }
                else
                {
                    // 認証済みでないとき、ログイン画面以外ではログイン画面リンクを表示
                    if (!(reqControllerName.Equals("Login") && reqActionName.Equals("Index")))
                    {
                        <li>@Html.ActionLink("ログイン", "Index", "Login")</li>
                    }
                }
            </ul>
        </div>
    </nav>

    <div class="container">
        @if (reqControllerName.Equals("Login") && reqActionName.Equals("Index"))
        {
            @RenderBody()
        }
        else
        {
            <div class="col-md-9">
                @* 左:メインコンテンツエリア *@
                @RenderBody()
            </div>
            <div class="col-md-3">
                @* 右:サイドメニューエリア *@
                @* bootstrapのlist-groupを用いて、カテゴリ一覧を表示 *@
                <ul class="list-group">
                    @* リストのヘッダーの役割とするためactiveにする *@
                    <li class="list-group-item active">カテゴリ</li>
                    @*リストデータ*@
                    @foreach (Category category in ViewBag.Categories)  // * Categoryクラスを認識するために、usingでModels名前空間を読み込んでおく
                    {
                        <li class="list-group-item">
                            @*カテゴリ詳細画面へのリンクを表示し、隣にカテゴリに属する記事数をハイライト表示。*@
                            @** リストの場合は既定でバッジが自動的に右寄せになる(HTMLでbadgeを先に書いていても)。*@
                            <span class="badge">@Html.DisplayFor(model => category.ArticleCount)</span>
                            @Html.ActionLink(category.CategoryName, "Details", new { controller = "Categories", id = category.Id })
                        </li>
                    }
                </ul>
            </div>
        }
    </div>


    <script src="~/Scripts/jquery-3.4.1.min.js"></script>
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

    <script>
        @**
         * 指定のセレクタが付与されているHTML要素(textが日時文字列でUTC日時と想定)について、
         * その各要素のUTC日時文字列をクライアント側ロケール日時文字列に変換する。省略した場合、
         * @param dateTimeSelectorToConvert 変換対象のHTML要素を識別するためのセレクタ。
         * @param locale 変換後の日時文字列をフォーマットするためのロケール文字("ja-JP"など)。省略した場合、JavaScript runtimeのデフォルトロケールが使われる。
         *@
        const convertDateTimeToClientFromUtc = (dateTimeSelectorToConvert, locale) => {
            $(dateTimeSelectorToConvert).each(function (elemIdx, elem) {
                const dateTimeUtc = new Date($(elem).text());

                const clientUtcTimeOffsetByMin = -1 * (new Date()).getTimezoneOffset();

                const dateTimeCli = new Date(dateTimeUtc.getTime());
                dateTimeCli.setMinutes(dateTimeCli.getMinutes() + clientUtcTimeOffsetByMin);

                const dateTimeCliFormattedStr = dateTimeCli.toLocaleString(locale);
                $(elem).text(dateTimeCliFormattedStr);
            });
        };
    </script>
    <script>
        $(function () {
            // 各ビューの日時(UTC)をクライアントロケール日時に変換する。フォーマットは"yyyy/MM/dd hh:mm:ss"とするためja-JPとする。
            convertDateTimeToClientFromUtc(".dateTimeToConvertToClientFromUtc", "ja-JP");
        });
    </script>
</body>
</html>
