@using MyBlogWebApp.Models

@{
    // 現在のリクエストのコントローラ名とアクション名を取得
    var reqControllerName = HttpContext.Current.Request.RequestContext.RouteData.Values["controller"].ToString();
    var reqActionName = HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString();
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title</title>

    @* bootstrapを適用 *@
    <link href="~/Content/bootstrap.min.css" rel="stylesheet" />

    <style type="text/css">
        :root {
            /****************************************************************************************************
              基準値
            ****************************************************************************************************/
            /* 複数行を省略表示するline-clampスタイルに関わる基準値 */
            --line-clamp-linenum-std: 2; /* 折り返し表示する行数 */

            /****************************************************************************************************
              オプション値
            ****************************************************************************************************/
        }

        body {
            padding-top: 70px; /* bootstrapのnavigation barを(navbar-fixed-topで)表示する際に、ページ上部に70pxの余白が必要なため。 */
        }

        /* 記事やコメント等、文章ブロックの設定 */
        .sentence {
            /* 文字列の複数行(改行/whitespace)表示 & 折り返しの設定 */
            /* pre-wrapよりbreak-spacesの方がいいが、記述時点ではサポート対象外ブラウザが無視できないため併記する */
            white-space: pre-wrap;
            white-space: break-spaces;

            /* 文字列の折り返し設定 */
            overflow-wrap: break-word;
        }

        /* 複数行の省略表示 */
        .line-clamp {
            display: -webkit-box; /* Flexboxの状態にする(line-clamp有効化に必要) */
            -webkit-box-orient: vertical; /* Flexboxの子要素の配置方向(line-clamp有効化に必要) */
            -webkit-line-clamp: var(--line-clamp-linenum, var(--line-clamp-linenum-std)); /* 折り返し表示する行数 */
            overflow: hidden; /* ボックスからはみ出た分を非表示にする */
            width: var(--line-clamp-width, 100%) /* 必須ではないがoverflow,折り返しを効かせるために設定(指定せずウィンドウ幅に任せても作用する) */
        }
    </style>
</head>
<body>
    @* ヘッダーのナビゲーション部分 *@
    <nav class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                @* タイトル(記事一覧へのリンク付き) *@
                @* ログイン画面でもログインをキャンセルして記事一覧画面へ戻れる *@
                @Html.ActionLink("MyBlog", "Index", new { Controller = "Articles" }, new { @class = "navbar-brand" })
            </div>
            <ul class="nav navbar-nav navbar-right">
                @if (Request.IsAuthenticated)
                {
                    <li>@Html.ActionLink("投稿する", "Create", "Articles")</li>
                    <li>@Html.ActionLink("ログアウト", "SignOut", "Login")</li>
                }
                else
                {
                    // 認証済みでないとき、ログイン画面以外ではログイン画面リンクを表示
                    if (!(reqControllerName.Equals("Login") && reqActionName.Equals("Index")))
                    {
                        <li>@Html.ActionLink("ログイン", "Index", "Login")</li>
                    }
                }
            </ul>
        </div>
    </nav>

    <div class="container">
        @if (reqControllerName.Equals("Login") && reqActionName.Equals("Index"))
        {
            @RenderBody()
        }
        else
        {
            <div class="col-md-9">
                @* 左:メインコンテンツエリア *@
                @RenderBody()
            </div>
            <div class="col-md-3">
                @* 右:サイドメニューエリア *@
                @* bootstrapのlist-groupを用いて、カテゴリ一覧を表示 *@
                <ul class="list-group">
                    @* リストのヘッダーの役割とするためactiveにする *@
                    <li class="list-group-item active">カテゴリ</li>
                    @*リストデータ*@
                    @foreach (Category category in ViewBag.Categories)  // * Categoryクラスを認識するために、usingでModels名前空間を読み込んでおく
                    {
                        <li class="list-group-item">
                            @*カテゴリ詳細画面へのリンクを表示し、隣にカテゴリに属する記事数をハイライト表示。*@
                            @** リストの場合は既定でバッジが自動的に右寄せになる(HTMLでbadgeを先に書いていても)。*@
                            <span class="badge">@Html.DisplayFor(model => category.ArticleCount)</span>
                            @Html.ActionLink(category.CategoryName, "Details", new { controller = "Categories", id = category.Id })
                        </li>
                    }
                </ul>
            </div>
        }
    </div>


    <script src="~/Scripts/jquery-3.4.1.min.js"></script>
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

    <script src="~/Scripts/moment.min.js"></script>
    <script src="~/Scripts/moment-with-locales.min.js"></script>
    @*<script src="~/Scripts/moment-timezone.min.js"></script>*@
    @*<script src="~/Scripts/moment-timezone-with-data.min.js"></script>*@

    <script>
        @**
         * 指定のセレクタが付与されているHTML要素(textがISO8601形式のUTC日時(末尾がZ)と想定)について、
         * その各要素のUTC日時文字列をクライアント側ロケール日時文字列に変換する。省略した場合、
         * @param dateTimeSelectorToConvert 変換対象のHTML要素を識別するためのセレクタ。
         *@
        const convertDateTimeToClientFromUtc = (dateTimeSelectorToConvert) => {
            $(dateTimeSelectorToConvert).each(function (elemIdx, elem) {
                /* [Moment.jsライブラリによる方法] */
                // ブラウザのロケールをmomentに設定
                const locale = window.navigator.userLanguage || window.navigator.language;
                moment.locale(locale);

                // ISO8601規格に基づいたタイムゾーンオフセット付き日時文字列("yyyy-MM-ddTHH:mm:ssZ"等)をmomentコンストラクタの引数に指定して生成したmomentオブジェクトの場合、
                // ローカルモードとなるので、出力表示時に現地ロケールに調整されて表示される。
                // * moment(...): ローカルモード。あいまいな入力(オフセットなし)は現地時間と見なされます。明確な入力(オフセットあり)は現地時間に調整されます。
                const targetMoment = moment($(elem).text().trim());
                $(elem).text(targetMoment.format("llll"));  // 年月日・曜日・時分をローカライズ表示(曜日等が短い版) (例：日本では"2018年8月22日(水) 04:15")

                /* [JS標準Dateクラスによる方法1]
                // ISO8601規格に基づいたUTC文字列("yyyy-MM-ddTHH:mm:ssZ")をDateコンストラクタの引数に指定して生成したDateオブジェクトの場合、
                // toString(),toLocaleString(),getHours()等の出力用メソッドを用いるとブラウザのロケール設定を考慮した日時を返してくれる。
                const dateTimeIsoUtc = new Date($(elem).text().trim());
                $(elem).text(dateTimeIsoUtc.toLocaleString("ja-JP")));
                */

                /* [JS標準Dateクラスによる方法2]
                const dateTimeUtc = new Date($(elem).text().trim());

                const clientUtcTimeOffsetByMin = -1 * (new Date()).getTimezoneOffset();

                const dateTimeCli = new Date(dateTimeUtc.getTime());
                dateTimeCli.setMinutes(dateTimeCli.getMinutes() + clientUtcTimeOffsetByMin);

                const dateTimeCliFormattedStr = dateTimeCli.toLocaleString("ja-JP"));
                $(elem).text(dateTimeCliFormattedStr);
                */
            });
        };
    </script>
    <script>
        $(function () {
            // 各ビューの日時(UTC)をクライアントロケール日時に変換する。
            convertDateTimeToClientFromUtc(".dateTimeToConvertToClientFromUtc");
        });
    </script>
</body>
</html>
